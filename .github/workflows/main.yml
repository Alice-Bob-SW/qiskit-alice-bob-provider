name: Checks, Tests and Release

on:
  push:
    branches: [main, release]
  pull_request:
    branches: [main, release]

jobs:
  # ðŸ”¹ Test on Ubuntu
  tests-ubuntu:
    name: tests-python${{ matrix.python-version }}-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        os: ["ubuntu-latest"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        run: make install
      - name: Run Unit Tests
        run: make unit-tests

  # ðŸ”¹ Test on macOS
  tests-macOS:
    name: tests-python${{ matrix.python-version }}-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        os: ["macOS-latest"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        run: make install
      - name: Run Unit Tests
        run: make unit-tests

  # ðŸ”¹ Test on Windows
  tests-windows:
    name: tests-python${{ matrix.python-version }}-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        os: ["windows-latest"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        run: make install
      - name: Run Unit Tests
        run: make unit-tests

  # ðŸ”¹ Linting (Only on Pull Requests)
  lint:
    name: lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install Dependencies
        run: make install
      - name: Run Lint
        run: make lint

  # ðŸ”¹ Commit Message Check
  commit-message-check:
    name: commit-message-check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
      - uses: actions/checkout@v4
      - name: Validate Commit Messages
        uses: wagoid/commitlint-github-action@v6

  # ðŸ”¹ Release Process
  release:
    name: release
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release') }}
    runs-on: ubuntu-latest
    needs: [tests-ubuntu, tests-macOS, tests-windows, commit-message-check]
    permissions:
      id-token: write
      contents: write

    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.CLOUD_CI_DEPLOY_APP_ID }}
          private-key: ${{ secrets.CLOUD_CI_DEPLOY_PRIVATE_KEY }}

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Create Virtual Environment & Install Dependencies
        run: make install

      - name: Check If a New Version Should Be Released
        id: release
        run: |
          make check-release
          cat release_env.txt >> $GITHUB_ENV

      - name: Run Semantic Version Release
        if: ${{ env.RELEASED == 'true' }}
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          make release-version
          echo "LAST_RELEASED_TAG=$(semantic-release version --print-last-released-tag 2>/dev/null || echo '')" >> $GITHUB_ENV

      - name: Sync `release` into `main`
        if: ${{Â github.ref == 'refs/heads/release' && env.RELEASED == 'true' }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@users.noreply.github.com"
          git fetch origin main release
          git checkout main
          git pull origin main
          git merge --ff-only release || { echo "Fast-forward merge failed. Manual resolution required."; exit 1; }
          git push origin main

      - name: Publish to TestPyPI
        if: ${{ github.ref == 'refs/heads/main' && env.RELEASED == 'true' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

      - name: Publish to PyPI
        if: ${{ github.ref == 'refs/heads/release' && env.RELEASED == 'true' }}
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Publish | Upload to GitHub Release Assets
        if: ${{ env.RELEASED == 'true' }}
        uses: python-semantic-release/publish-action@v9.19.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.LAST_RELEASED_TAG }}
